package com.github.superbackend.service;

import com.github.superbackend.util.OAuth2ApiCaller;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;
import org.springframework.security.oauth2.client.userinfo.OAuth2UserService;
import org.springframework.security.oauth2.core.OAuth2AccessToken;
import org.springframework.security.oauth2.core.OAuth2AuthenticationException;
import org.springframework.security.oauth2.core.OAuth2Error;
import org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponse;
import org.springframework.security.oauth2.core.user.DefaultOAuth2User;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Collections;
import java.util.Map;

@Service
public class CustomOAuth2UserService implements OAuth2UserService<OAuth2UserRequest, OAuth2User> {
    private RestTemplate restTemplate;
    private final OAuth2ApiCaller apiCaller; // OAuth2ApiCaller 추가

    @Autowired
    public CustomOAuth2UserService() {
        this.restTemplate = restTemplate;
        this.apiCaller = new OAuth2ApiCaller(restTemplate);
    }

    // OAuth2 API 호출을 위한 메소드
    private Map<String, Object> callOAuth2Api(OAuth2UserRequest userRequest, String apiUrl) {
        OAuth2AccessToken accessToken = userRequest.getAccessToken();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Authorization", "Bearer " + accessToken.getTokenValue());
        HttpEntity<?> entity = new HttpEntity<>(headers);
        ResponseEntity<Map<String, Object>> response = restTemplate.exchange(
                apiUrl,
                HttpMethod.GET,
                entity,
                new ParameterizedTypeReference<Map<String, Object>>() {
                }
        );

        if (response.getStatusCode() == HttpStatus.OK) {
            return response.getBody();
        }

        throw new OAuth2AuthenticationException(new OAuth2Error("api_call_error"));
    }


    @Override
    public OAuth2User loadUser(OAuth2UserRequest userRequest) throws OAuth2AuthenticationException {
        String registrationId = userRequest.getClientRegistration().getRegistrationId();
        String accessToken = userRequest.getAccessToken().getTokenValue();
        Map<String, Object> userInfo = null;

        if ("naver".equals(registrationId)) {
            String apiUrl = "https://openapi.naver.com/v1/nid/me";
            userInfo = apiCaller.callApi(apiUrl, accessToken);
        } else if ("kakao".equals(registrationId)) {
            String apiUrl = "https://kapi.kakao.com/v2/user/me";
            userInfo = apiCaller.callApi(apiUrl, accessToken);
        }

        if (userInfo != null) {
            // 사용자 정보에서 필요한 데이터 추출
            String email = (String) userInfo.get("email");
            String name = (String) userInfo.get("name");

            // 추출한 데이터로 UserDetails 생성
            UserDetails userDetails = User.builder()
                    .username(email) // 이메일을 사용자명으로 설정
                    .password("") // 비밀번호 필드가 필요하지 않은 경우 빈 문자열로 설정
                    .authorities(Collections.emptyList()) // 사용자 권한 설정
                    .build();

            // UserDetails를 포함하는 OAuth2User 생성하여 반환
            return new DefaultOAuth2User(userDetails.getAuthorities(), userInfo, "email");
        }

        throw new OAuth2AuthenticationException(new OAuth2Error("invalid_client_registration", "Unsupported registration ID", null));
    }


    }
